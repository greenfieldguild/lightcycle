#!/usr/bin/env python3
import sys
sys.path.insert(0,"/home/temujin9/Projects/Greenfield_Guild/code/")

import boto3
import botocore.exceptions
import click
import colorama
import configparser
from lightcycle.meh import meh,fail
import lightcycle.s3.org
import os

def header(s):
  click.secho("\n# "+s+" #", bold=True)

@click.group()
@click.pass_context
def cli(ctx):
  config = configparser.ConfigParser()
  config.read(os.path.join(click.get_app_dir("lightcycle"),"org.ini"))
  ctx.obj = config
  header("Starting lightcycle "+ctx.invoked_subcommand)

@cli.command()
@click.option("--org", help="Organization short name")
@click.pass_context
def status(ctx, org=""):
  """Show status of this lightcycle setup"""
  if not org:
    if not "default" in ctx.obj["orgs"]:
      fail("No --org supplied and no default in config, cannot continue")
    org = ctx.obj["orgs"]["default"]
  if not org in ctx.obj["orgs"]:
    fail("Org name "+org+" is not in config, run 'lightcycle config' to configure an existing one, or 'lightcycle init' to create a new one")
  path = ctx.obj["orgs"][org]
  organization = lightcycle.s3.org.Organization(
    name = org,
    path = path,
  )
  organization.load()
  meh("status","collect status info")
  has_config = False
  meh("Look for org config at "+path)
  if not has_config:
    click.echo("No lightcycle installation at "+path+". Run 'lightcycle init' to create one.")
    exit()
  endpoints = []
  if len(endpoints) == 0:
    click.echo("No endpoints found. Run 'lightcycle create' to build your first one.")
    exit()
  meh("status","display endpoint info")
  # for loop on endpoints
    # list basic status info
    # list clusters
  fail("Lots of MEH here")

@cli.command()
@click.option("--org", prompt="Org", help="Organization short name")
#@click.option("--backend", help="Backend to use (currently only s3)")
#@click.option("--force", is_flag=True, default=False, help="Force a reinitialization (DANGEROUS)")
@click.option("--path", help="Path to lightcycle shared store")
@click.option("--region", help="AWS region for shared resources")
def init(org, backend="s3", force=False, path="", region="us-east-1"):
  """Create the shared organizational config"""
  path = path if path else org+"-lightcycle"
  organization = lightcycle.s3.org.Organization(
    name = org,
    path = path,
    region = region,
  )
  header("Setting up "+organization.name)
  try:
    organization.create()
    organization.config()
    click.echo("Created lightcycle installation at "+organization.path)
  except Exception as err:
    fail(str(err))
  fail("Lots of MEH here")

@cli.command()
@click.option("--org", prompt="Org", help="Organization short name")
#@click.option("--backend", help="Backend to use (currently only s3)")
@click.option("--force", is_flag=True, help="Overwrite existing local config")
@click.option("--path", help="Path to lightcycle shared store")
def config(org, backend="s3", force=False, path=""):
  """Set up local configuration"""
  path = path if path else org+"-lightcycle"
  bucket, _, subpath = path.partition("/")
  org = lightcycle.s3.org.Organization(
    name = org,
    bucket = bucket,
    path = subpath,
  )
  org.load()
  org.config()
  click.echo("Set up local configuration from "+path)
  fail("Lots of MEH here")

@cli.command()
def create(**args):
  """Create a lightcycle endpoint"""
  meh("create", **args)
  fail("Lots of MEH here")

@cli.command()
def launch(**args):
  """Launch a lightcycle cluster"""
  meh("launch", **args)
  fail("Lots of MEH here")

@cli.command()
def promote(**args):
  """Promote a lightcycle cluster"""
  meh("promote", **args)
  fail("Lots of MEH here")

@cli.command()
def prune(**args):
  """Remove lightcycle cluster(s)"""
  meh("prune", **args)
  fail("Lots of MEH here")

@cli.command()
def destroy(**args):
  """Remove lightcycle endpoint or shared config"""
  meh("prune", **args)
  fail("Lots of MEH here")

if __name__ == '__main__':
  cli()
