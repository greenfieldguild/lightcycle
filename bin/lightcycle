#!/usr/bin/env python3
# FIXME: http://marthall.github.io/blog/how-to-package-a-python-app/
import sys
sys.path.insert(0,"/home/temujin9/Projects/Greenfield_Guild/code/") # HACK

import boto3
import botocore.exceptions
import click
import colorama
import json
from lightcycle.meh import meh,fail
from lightcycle.s3.endpoint import Endpoint
import os

def header(s):
  click.secho("\n# "+s+" #", bold=True)

@click.group()
def cli():
  pass

@cli.command()
@click.option("-e", "--endpoint", help="Endpoint name")
def create(endpoint="", **args):
  """Launch a new cluster"""
  ept = Endpoint.load_local(endpoint)
  cluster = ept.new_cluster()

def default_org():
  return os.environ["LIGHTCYCLE_ORG"] if "LIGHTCYCLE_ORG" in os.environ else None

def default_endpoint():
  return os.environ["LIGHTCYCLE_ENDPOINT"] if "LIGHTCYCLE_ENDPOINT" in os.environ else "sandbox"

@click.pass_context
def default_path(ctx):
  if "LIGHTCYCLE_PATH" in os.environ: return os.environ["LIGHTCYCLE_PATH"]
  if not ctx.params["org"]: ctx.params["org"] = click.prompt("Org prefix",default="")
  if ctx.params["org"]: return "s3://"+ctx.params["org"]+"-lightcycle/"+ctx.params["endpoint"]
  return ""

def validate_path(ctx,param,value):
  if not (value or default_path()): fail("Please specify at least one of --org or --path")
  return value

@cli.command()
@click.option("-o", "--org", is_eager=True, default=default_org, help="Organization prefix")
@click.option("-e", "--endpoint", is_eager=True, default=default_endpoint, help="Endpoint name")
@click.option("-p","--path", callback=validate_path, help="Backend path")
def connect(org="", endpoint="sandbox", path=""):
  """Configure connection to an existing endpoint"""
  path = path if path else default_path()
  ept = Endpoint(endpoint, path)
  ept.verify_remote()
  ept.write_local()
  click.echo("Connected to "+endpoint+" endpoint at "+path)

@cli.command()
@click.option("-e", "--endpoint", help="Endpoint name")
def destroy(**args):
  """Destroy an unused cluster"""
  meh("destroy", **args)

@cli.command()
@click.option("-o", "--org", is_eager=True, default=default_org, help="Organization prefix")
@click.option("-e", "--endpoint", is_eager=True, default=default_endpoint, help="Endpoint name")
@click.option("-p","--path", prompt="Backend path", default=default_path, callback=validate_path, help="Backend path")
@click.option("--default", is_flag=True, help="Make this the default endpoint")
@click.option("--force", is_flag=True, help="Force a reinitialization (DANGEROUS)")
def init(org="", endpoint="sandbox", default=False, force=False):
  """Initialize a new endpoint"""
  header("Initializing the "+endpoint+" endpoint")
  ept = Endpoint(endpoint, path)
  ept.backend.ensure(force)
  ept.write_remote()
  ept.write_local(default)
  ept.tf_apply()

@cli.command()
@click.option("-e", "--endpoint", help="Endpoint name")
def promote(**args):
  """Promote a cluster"""
  meh("promote", args)

@cli.command()
@click.option("-a", "--all", "show_all", is_flag=True, help="Show status from all endpoints")
@click.option("-e", "--endpoint", help="Endpoint name")
def status(show_all=False, endpoint=""):
  """Show state of lightcycle endpoint(s)"""
  epts = []
  if show_all:
    meh("load endpoints")
  else:
    epts = [ Endpoint.load_local(endpoint) ]
  for ept in epts:
    meh("status", ept)

if __name__ == '__main__':
  cli()
